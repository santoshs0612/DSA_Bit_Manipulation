
Given an array A containing 2*N+2 positive numbers, out of which 2*N numbers exist in pairs whereas the other two number occur exactly once and are distinct. Find the other two numbers. Return in increasing order.


Example 1:

Input: 
N = 2
arr[] = {1, 2, 3, 2, 1, 4}
Output:
3 4 
Explanation:
3 and 4 occur exactly once.
Example 2:

Input:
N = 1
arr[] = {2, 1, 3, 2}
Output:
1 3
Explanation:
1 3 occur exactly once.









{
public:
    vector<int> singleNumber(vector<int> nums) 
    {
        // Code here.
        // XOR Method
        
        int res=0;
        int n=nums.size();
        vector<int> ans;
        for(int i=0;i<n;i++)
        {
            res^=nums[i];
        }
        int set_bit=1;
        int new_res=res;
        // calculating the 1s position in res
        while(1)
        {
            //res&=set_bit;
            //res&=set_bit;
            if((res&set_bit)!=0)
            {
                break;
            }
            set_bit<<=1;
        }
        //cout<<set_bit;
        // for deviding array into two parts with help of set_bit ones posion 
        int first_val=0;
        int second_val=0;
        for(int i=0;i<n;i++)
        {
            if((set_bit&nums[i]))
            {
                first_val^=nums[i];
            }
        }
        //cout<<new_res;
        if(first_val>(new_res^first_val))
        {
            ans.push_back(new_res^first_val);
            ans.push_back(first_val);
        }
        else {
            ans.push_back(first_val);
            ans.push_back(new_res^first_val);
        }
        return ans;
    }
};
